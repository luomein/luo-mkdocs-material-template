{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stemmer"]},"docs":[{"location":"","title":"Material for MkDocs","text":"<p>\u6b61\u8fce\u4f86\u5230\u672c\u7ad9</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/11/30/adding-a-badge-to-your-project/","title":"Adding a  badge to your project","text":"<p>You enjoy working with Material for MkDocs? Share the love! You can now add a badge to your project's README, showing that your project is built with Material for MkDocs.</p> <p>Material for MkDocs' logo was just added to Simple Icons, which is used by Shields.io to include logos in badges. We generated a badge for you, which you can add to your project's README:</p> <p></p>"},{"location":"blog/2023/11/30/adding-a-badge-to-your-project/#usage","title":"Usage","text":"<p>Just copy the following snippet and paste it into your project's <code>README.md</code>:</p> <pre><code>[![Built with Material for MkDocs](https://img.shields.io/badge/Material_for_MkDocs-526CFE?style=for-the-badge&amp;logo=MaterialForMkDocs&amp;logoColor=white)](https://squidfunk.github.io/mkdocs-material/)\n</code></pre>"},{"location":"blog/2022/09/12/blog-support-just-landed/","title":"Blog support just landed","text":"<p>Hey there! You're looking at our new blog, built with the brand new built-in blog plugin. With this plugin, you can easily build a blog alongside your documentation or standalone.</p> <p>Proper support for blogging, as requested by many users over the past few years, was something that was desperately missing from Material for MkDocs' feature set. While everybody agreed that blogging support was a blind spot, it was not obvious whether MkDocs could be extended in a way to allow for blogging as we know it from Jekyll and friends. The built-in blog plugin proves that it is, after all, possible to build a blogging engine on top of MkDocs, in order to create a technical blog alongside your documentation, or as the main thing.</p> <p>This article explains how to build a standalone blog with Material for MkDocs. If you want to build a blog alongside your documentation, please refer to the plugin's documentation.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#quick-start","title":"Quick start","text":""},{"location":"blog/2022/09/12/blog-support-just-landed/#creating-a-standalone-blog","title":"Creating a standalone blog","text":"<p>You can bootstrap a new project using the <code>mkdocs</code> executable:</p> <pre><code>mkdocs new .\n</code></pre> <p>This will create the following structure:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre>"},{"location":"blog/2022/09/12/blog-support-just-landed/#configuration","title":"Configuration","text":"<p>In this article, we're going to build a standalone blog, which means that the blog lives at the root of your project. For this reason, open <code>mkdocs.yml</code>, and replace its contents with:</p> <pre><code>site_name: My Blog\ntheme:\n  name: material\n  features:\n    - navigation.sections\nplugins:\n  - blog:\n      blog_dir: . # (1)!\n  - search\n  - tags\nnav:\n  - index.md\n</code></pre> <ol> <li>This is the important part \u2013 we're hosting the blog at the root of the     project, and not in a subdirectory. For more information, see the     <code>blog_dir</code> configuration option.</li> </ol>"},{"location":"blog/2022/09/12/blog-support-just-landed/#blog-setup","title":"Blog setup","text":"<p>The blog index page lives in <code>docs/index.md</code>. This page was pre-filled by MkDocs with some content, so we're going to replace it with what we need to bootstrap the blog:</p> <pre><code># Blog\n</code></pre> <p>That's it.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#writing-your-first-post","title":"Writing your first post","text":"<p>Now that we have set up the built-in blog plugin, we can start writing our first post. All blog posts are written with the exact same Markdown flavor as already included with Material for MkDocs. First, create a folder called <code>posts</code> with a file called <code>hello-world.md</code>:</p> <pre><code>.\n\u251c\u2500 docs/\n\u2502  \u251c\u2500 posts/\n\u2502  \u2502  \u2514\u2500 hello-world.md # (1)!\n\u2502  \u2514\u2500 index.md\n\u2514\u2500 mkdocs.yml\n</code></pre> <ol> <li>If you'd like to arrange posts differently, you're free to do so. The URLs     are built from the format specified in <code>post_url_format</code> and     the titles and dates of posts, no matter how they are organized     inside the <code>posts</code> directory.</li> </ol> <p>Then, open up <code>hello-world.md</code>, and add the following lines:</p> <pre><code>---\ndraft: true # (1)!\ndate: 2022-01-31\ncategories:\n  - Hello\n  - World\n---\n\n# Hello world!\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque nec\nmaximus ex. Sed consequat, nulla quis malesuada dapibus, elit metus vehicula\nerat, ut egestas tellus eros at risus. In hac habitasse platea dictumst.\nPhasellus id lacus pulvinar erat consequat pretium. Morbi malesuada arcu mauris\nNam vel justo sem. Nam placerat purus non varius luctus. Integer pretium leo in\nsem rhoncus, quis gravida orci mollis. Proin id aliquam est. Vivamus in nunc ac\nmetus tristique pellentesque. Suspendisse viverra urna in accumsan aliquet.\n\n&lt;!-- more --&gt;\n\nDonec volutpat, elit ac volutpat laoreet, turpis dolor semper nibh, et dictum\nmassa ex pulvinar elit. Curabitur commodo sit amet dolor sed mattis. Etiam\ntempor odio eu nisi gravida cursus. Maecenas ante enim, fermentum sit amet\nmolestie nec, mollis ac libero. Vivamus sagittis suscipit eros ut luctus.\n\nNunc vehicula sagittis condimentum. Cras facilisis bibendum lorem et feugiat.\nIn auctor accumsan ligula, at consectetur erat commodo quis. Morbi ac nunc\npharetra, pellentesque risus in, consectetur urna. Nulla id enim facilisis\narcu tincidunt pulvinar. Vestibulum laoreet risus scelerisque porta congue.\nIn velit purus, dictum quis neque nec, molestie viverra risus. Nam pellentesque\ntellus id elit ultricies, vel finibus erat cursus.\n</code></pre> <ol> <li>If you mark a post as a draft, a red marker appears next to the post date     on index pages. When the site is built, drafts are not included in the     output. This behavior can be changed, e.g. for rendering drafts when     building deploy previews.</li> </ol> <p>When you spin up the live preview server, you should be greeted by your first post! You'll also realize, that archive and category indexes have been automatically generated for you:</p> <p></p> <p>However, this is just the start. The built-in blog plugin packs a lot of functionality needed in day-to-day blogging. Visit the documentation of the plugin to learn about the following topics:</p> <ul> <li>Adding an excerpt</li> <li>Adding authors</li> <li>Adding categories</li> <li>Adding tags</li> <li>Adding related links</li> <li>Linking from and to posts</li> <li>Setting the reading time</li> <li>Setting defaults</li> </ul> <p>Additionally, the built-in blog plugin has dozens of configuration options which allow for fine-tuning the output. You can configure post slugs, general behavior and much more.</p>"},{"location":"blog/2022/09/12/blog-support-just-landed/#whats-next","title":"What's next?","text":"<p>Getting basic blogging support out the door was quite a challenge \u2013 the built-in blog plugin is probably the biggest release this year and already packs a lot of functionality. However, Material for MkDocs is used in many different contexts, which is why we'd expect to iterate, as always.</p> <p>Some ideas already proposed by users:</p> <ul> <li> <p>Blog series: Authors should be able to create so called blog series and   assign posts to a blog series using simple identifiers. For each post that is   part of a series, a list with links to all other posts should be included in   the post's content.</p> </li> <li> <p>Author indexes: Besides archive and category indexes, authors should   be able to create per-author indexes, which list all posts linked to an   author. Additionally, a profile should be created for each author and linked   from posts.</p> </li> <li> <p>Social share buttons: It should be easy to share blog posts via social   media or other ways. For this reason, it should be possible to automatically   include social sharing buttons with each post.</p> </li> </ul> <p>What's still missing from the brand new built-in blog plugin? Feel free to share your ideas in the comments. Together, we can build one of the best modern engines for technical blogging!</p>"},{"location":"blog/2022/05/05/chinese-search-support/","title":"Chinese search support \u2013 \u4e2d\u6587\u641c\u7d22\u200b\u652f\u6301","text":"<p>Insiders adds experimental Chinese language support for the built-in search plugin \u2013 a feature that has been requested for a long time given the large number of Chinese users.</p> <p>After the United States and Germany, the third-largest country of origin of Material for MkDocs users is China. For a long time, the built-in search plugin didn't allow for proper segmentation of Chinese characters, mainly due to missing support in lunr-languages which is used for search tokenization and stemming. The latest Insiders release adds long-awaited Chinese language support for the built-in search plugin, something that has been requested by many users.</p> <p>Material for MkDocs\u7d42\u65bc\u200b\u652f\u6301\u200b\u4e2d\u6587\u200b\u4e86\uff01\u6587\u672c\u200b\u88ab\u200b\u6b63\u78ba\u200b\u5206\u5272\u200b\u4e26\u4e14\u200b\u66f4\u200b\u5bb9\u6613\u200b\u627e\u5230\u3002</p> <p>This article explains how to set up Chinese language support for the built-in search plugin in a few minutes.</p>"},{"location":"blog/2022/05/05/chinese-search-support/#configuration","title":"Configuration","text":"<p>Chinese language support for Material for MkDocs is provided by jieba, an excellent Chinese text segmentation library. If jieba is installed, the built-in search plugin automatically detects Chinese characters and runs them through the segmenter. You can install jieba with:</p> <pre><code>pip install jieba\n</code></pre> <p>The next step is only required if you specified the <code>separator</code> configuration in <code>mkdocs.yml</code>. Text is segmented with zero-width whitespace characters, so it renders exactly the same in the search modal. Adjust <code>mkdocs.yml</code> so that the <code>separator</code> includes the <code>\\u200b</code> character:</p> <pre><code>plugins:\n  - search:\n      separator: '[\\s\\u200b\\-]'\n</code></pre> <p>That's all that is necessary.</p>"},{"location":"blog/2022/05/05/chinese-search-support/#usage","title":"Usage","text":"<p>If you followed the instructions in the configuration guide, Chinese words will now be tokenized using jieba. Try searching for  \u652f\u6301 to see how it integrates with the built-in search plugin.</p> <p>Note that this is an experimental feature, and I, @squidfunk, am not proficient in Chinese (yet?). If you find a bug or think something can be improved, please open an issue.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/","title":"Excluding content from search","text":"<p>The latest Insiders release brings three new simple ways to exclude dedicated parts of a document from the search index, allowing for more fine-grained control.</p> <p>Two weeks ago, Material for MkDocs Insiders shipped a brand new search plugin, yielding massive improvements in usability, but also in speed and size of the search index. Interestingly, as discussed in the previous blog article, we only scratched the surface of what's now possible. This release brings some useful features that enhance the writing experience, allowing for more fine-grained control of what pages, sections and blocks of a Markdown file should be indexed by the built-in search functionality.</p> <p>The following section discusses existing solutions for excluding pages and sections from the search index. If you immediately want to learn what's new, skip to the section just after that.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/#prior-art","title":"Prior art","text":"<p>MkDocs has a rich and thriving ecosystem of plugins, and it comes as no surprise that there's already a fantastic plugin by @chrieke to exclude specific sections of a Markdown file \u2013 the mkdocs-exclude-search plugin. It can be installed with:</p> <pre><code>pip install mkdocs-exclude-search\n</code></pre> <p>How it works: the plugin post-processes the <code>search_index.json</code> file that is generated by the built-in search plugin, giving the author the ability to exclude certain pages and sections by adding a few lines of configuration to <code>mkdocs.yml</code>. An example:</p> <pre><code>plugins:\n  - search\n  - exclude-search:\n      exclude:\n        - page.md\n        - page.md#section\n        - directory/*\n        - /*/page.md\n</code></pre> <p>It's easy to see that the plugin follows a configuration-centric approach, which adds support for advanced filtering techniques like infix- and suffix-filtering using wildcards. While this is a very powerful idea, it comes with some downsides:</p> <ol> <li> <p>Exclusion patterns and content are not co-located: exclusion patterns     need to be defined in <code>mkdocs.yml</code>, and not as part of the respective     document or section to be excluded. This might result in stale exclusion     patterns, leading to unintended behavior:</p> <ul> <li> <p>When a headline is changed, its slug (permalink) also changes, which might   suddenly match (or unmatch) a pattern, e.g., when an author fixes a typo   in a headline.</p> </li> <li> <p>As exclusion patterns support the use of wildcards, different authors   might overwrite each other's patterns without any immediate feedback since   the plugin does only report the number of excluded documents \u2013 not what   has been excluded.<sup>1</sup></p> </li> </ul> </li> <li> <p>Exclusion control might be too coarse: The mkdocs-exclude-search     plugin only allows for the exclusion of pages and sections. It's not     possible to exclude parts of a section, e.g., content that is irrelevant     to search but must be included as part of the documentation.</p> </li> </ol>"},{"location":"blog/2021/09/26/excluding-content-from-search/#whats-new","title":"What's new?","text":"<p>The latest Insiders release brings fine-grained control for excluding pages, sections, and blocks from the search index, implemented through front matter, as well as the Attribute Lists. Note that it doesn't replace the mkdocs-exclude-search plugin but complements it.</p>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-pages","title":"Excluding pages","text":"<p>An entire page can be excluded from the search index by adding a simple directive to the front matter of the respective Markdown file. The good thing is that the author now only has to check the top of the document to learn whether it is excluded or not:</p> <pre><code>---\nsearch:\n  exclude: true\n---\n\n# Page title\n...\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-sections","title":"Excluding sections","text":"<p>If a section should be excluded, the author can use the Attribute Lists extension to add a pragma called <code>data-search-exclude</code> at the end of a heading. The pragma is not included in the final HTML, as search pragmas are filtered by the search plugin before the page is rendered:</p> <code>docs/page.md</code> <code>search_index.json</code> <pre><code># Page title\n\n## Section 1\n\nThe content of this section is included\n\n## Section 2 { data-search-exclude }\n\nThe content of this section is excluded\n</code></pre> <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\":\"page/\",\n      \"text\":\"\",\n      \"title\":\"Document title\"\n    },\n    {\n      \"location\":\"page/#section-1\",\n      \"text\":\"&lt;p&gt;The content of this section is included&lt;/p&gt;\",\n      \"title\":\"Section 1\"\n    }\n  ]\n}\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#excluding-blocks","title":"Excluding blocks","text":"<p>If even more fine-grained control is desired, the pragma can be added to any block-level element or inline-level element that is officially supported by the Attribute Lists extension:</p> <code>docs/page.md</code> <code>search_index.json</code> <pre><code># Page title\n\nThe content of this block is included\n\nThe content of this block is excluded\n{ data-search-exclude }\n</code></pre> <pre><code>{\n  ...\n  \"docs\": [\n    {\n      \"location\":\"page/\",\n      \"text\":\"&lt;p&gt;The content of this block is included&lt;/p&gt;\",\n      \"title\":\"Document title\"\n    },\n  ]\n}\n</code></pre>"},{"location":"blog/2021/09/26/excluding-content-from-search/#conclusion","title":"Conclusion","text":"<p>The latest release brings three simple ways to control more precisely what goes into the search index and what doesn't. It complements the already very powerful mkdocs-exclude-search plugin, allowing for new methods of shaping the structure, size and content of the search index.</p> <ol> <li> <p>When the log level is set to <code>DEBUG</code>, the plugin will report exactly which pages and sections have been excluded from the search index, but MkDocs will now flood the terminal with debug output from its core and other plugins.\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/","title":"Using <code>git sparse-checkout</code> for faster documentation builds","text":"<p>Leveraging <code>git sparse-checkout</code> in GitHub Actions enabled us to speed up documentation builds in our repository, cutting checkout times from 20 to 30 seconds to just 2 seconds.</p> <p>Developing an efficient approach to build documentation in CI workflows is essential, especially when working in large repositories with thousands of commits, like ours. Of course, we want to build documentation quickly and efficiently, ensuring fast and productive workflows. When using both the wonderful <code>git-committers</code> and <code>git-revision-date-localized</code> plugins to display document contributors and dates at the bottom of each page, we are required to set <code>fetch-depth: 0</code>, which resulted in checkout times of 20 to 30 seconds on our repository. By leveraging <code>git sparse-checkout</code> within GitHub Actions, check out time was brought down to 2 seconds.</p>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/#a-primer","title":"A Primer","text":"<p><code>git sparse-checkout</code> allows you to check out only a subset of the files in a repository, making it incredibly useful for large repositories where a full checkout takes long and includes many files that are not relevant when building documentation.</p>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/#github-actions","title":"GitHub Actions","text":"<p>To enable <code>git sparse-checkout</code> within GitHub Actions and ensure that you are only building the documentation that you need, add the following lines to your workflow file:</p> <pre><code>- uses: actions/checkout@v4\n  with:\n    fetch-depth: 0\n    sparse-checkout: |\n      docs\n      includes\n</code></pre> <p><code>git sparse-checkout</code> always checks out all files residing in the repository\u2019s root. This means that regardless of the specified paths or directories for sparse checkout, the files located in the root of the repository will always be included in the checkout process.</p> <p>Thus, you only need to specify the directories that are necessary for building documentation. In our case, we only need the <code>docs</code> and <code>includes</code> folders, but if you need additional directories, you can just add them to the end of the list. A complete example workflow for GitHub Actions:</p> <pre><code>name: documentation\non:\n  push:\n    branches:\n      - master\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n          sparse-checkout: |\n            docs\n            includes\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"blog/2023/09/22/using-git-sparse-checkout-for-faster-documentation-builds/#conclusion","title":"Conclusion","text":"<p>That's all there is! We're super happy with the results and hope that this will help you to speed up your documentation builds in GitHub Actions as well. As always, feel free to share your thoughts and experiences in the comments below.</p>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/","title":"Sunsetting Gitter: Towards Efficient Community Engagement","text":"<p>As we're starting to build a team around Material for MkDocs, we've decided to sunset and archive our Gitter channel on October 13, 2023 in favor of GitHub Discussions.</p> <p>As part of our efforts to improve the processes for maintaining Material for MkDocs and for supporting the community, we have reviewed the use of different communication channels. At the moment, both Gitter and GitHub Discussions allow to ask the community for support and to discuss ideas and issues. In the past weeks, we have begun to question whether this duplication is in the best interest of our project. This post explains the rationale behind our decision.</p>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/#the-constraints-of-gitter","title":"The Constraints of Gitter","text":"<p>In the first years of Material for MkDocs, Gitter served as a helpful platform for quick community interactions and questions. However, there are some inherent constraints that necessitated a shift. Here's a breakdown of the challenges we encountered:</p> <ol> <li> <p>Thread utilization \u2013    Even with the introduction of threads, many Gitter users were reticent to    use them, leading to cluttered and disconnected conversations, making it     difficult to follow.</p> </li> <li> <p>Search and discovery \u2013    Gitter's structure and interface makes it cumbersome to search for and    retrieve past messages, resulting in lost insights and repeated conversations.</p> </li> <li> <p>User interface \u2013    After the acquisition by Element, the user interface of Gitter has    experienced a severe decline, becoming more complicated, less intuitive and    user-friendly.</p> </li> <li> <p>Access mandate \u2013    The necessity for users to grant access to their GitHub accounts to use    Gitter posed an unnecessary access barrier and potential security concerns.</p> </li> </ol>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/#github-discussions","title":"GitHub Discussions","text":"<p>Thankfully, GitHub Discussions emerged and continues to evolve to be a much better alternative, eliminating many of Gitter's constraints and offering enhanced functionality:</p> <ol> <li> <p>Threaded conversations \u2013    GitHub Discussions supports structured, threaded conversations, ensuring    discussions are coherent, contextual, and easy to follow for everyone.</p> </li> <li> <p>Integration and linking \u2013    the platform facilitates seamless linking to other discussions, issues, code,    and much more, enriching conversations and providing comprehensive context.</p> </li> <li> <p>A unified platform \u2013    GitHub acts as a one-stop shop for support, allowing users to access varied    resources and support channels in one place, greatly improving user    experience.</p> </li> <li> <p>Discoverability \u2013    GitHub Discussions are easily searchable and allow for categorization,    preventing loss of valuable insights and fostering knowledge sharing.</p> </li> </ol>"},{"location":"blog/2023/10/02/sunsetting-gitter-towards-efficient-community-engagement/#conclusion","title":"Conclusion","text":"<p>Sunsetting Gitter is a leap towards creating more efficient, user-friendly, and enriched community interactions. By consolidating communication to GitHub Discussions, we seek to mitigate the fragmentation of information, ease the user journey, and fortify the bonds within our community.</p> <p>This concentrated approach enables us to provide consistent, fast and quality support to our users. In the past, the nature of queries raised on Gitter typically necessitated supplementary information or reproductions, prompting us to advise users to initiate a discussion subsequently. The shift to a centralized discussion forum is designed to simplify and accelerate this procedure, ensuring swift and efficient resolutions for our community. It is a testament to our ongoing commitment to support the community that helps Material for MkDocs flourish.</p> <p>We are confident that this streamlined approach will spur more fruitful discussions, innovative ideas, and collective growth, and we are excited to continue our journey with the unwavering support and active participation of our community.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/","title":"The past, present and future","text":"<p>2021 was a fantastic year for this project as we shipped many new awesome features, saw significant user growth and leveraged GitHub Sponsors to make the project sustainable.</p> <p>Today, together, MkDocs and Material for MkDocs are among the most popular options when it comes to choosing a static site generator and theme for your technical documentation project. Material for MkDocs ensures that your content is always perfectly presented to your audience, regardless of screen resolution or device capabilities. It has evolved to a framework for technical writing, offering many features, some of which are yet to be found in other static site generators. However, we're far from the end, as 2022 is going to bring some interesting new capabilities.</p> <p>This article showcases all features that were added in 2021 and gives an outlook on what's going to drop in 2022. Additionally, it provides some context on the history of the project.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#a-little-history","title":"A little history","text":"<p>In 2015, albeit 10 years in the industry, I was still quite new in Open Source. I wanted to release my latest Open Source project protobluff, a zero-copy Protocol Buffers implementation for C, which I've created as part of my former startup. As the project has a significant degree of complexity, I quickly realized that I was in need of good user documentation.</p> <p>After evaluating static site generators in general and Hugo, Sphinx and MkDocs in particular, I quickly decided that MkDocs seemed a good choice, as it was specifically aimed at technical project documentation and easy to use. Unfortunately, all of the available themes looked dated and given that I'm a very visual person, I just couldn't convince myself to call it a day.</p> <p>I had to build a theme.</p> <p>Months later, in February 2016, I released the first version of Material for MkDocs (and with it, protobluff, the project I wanted to release in the first place), and it looked like this:</p> <p></p> <p>It was already fully responsive and overall, well, quite okayish, but barely customizable, as only the logo could be changed. Beyond that, it had no options: No color or navigation options, no instant loading, etc. The search was very rudimentary and only supported section titles:</p> <p></p> <p>It's important to know that at this point in time I've built Material for MkDocs for protobluff, the project I was really caring about. Almost 6 years later, nobody knows protobluff, but this little side project has taken off. If back in those days, you would've told me big organizations like AWS, Microsoft and CERN, as well as extremely popular Open Source projects like FastAPI and Kubernetes will be using this project in the future \u2013 I would've declared you insane.</p> <p>I still find the success of this project quite surprising, as I thought that themes exist in abundance and are very much a solved problem. There's no glory in themes, no stars to earn (remember that I was new in Open Source, so this was the metric I was optimizing for), as there are thousands and thousands of options. However, as the years progressed, I learned that execution matters: although Material for MkDocs solves a problem for which thousands of solutions exist, it excels in a specific niche, and that niche is to be known as technical project documentation.</p> <p>Today, this project is not only popular but funded by almost 300 individuals and organizations, resulting in a yearly budget of more than $50,000. This allows me to set aside enough time for the development of new features, bug fixing, stability improvement, issue triage and general support and still feels like a dream to me, as there are many failed stories of Open Source funding and people telling you: don't do Open Source, you'll be working for free.</p> <p>Making Open Source sustainable is, after all, possible in 2021.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#2021-in-numbers","title":"2021 in numbers","text":"<p>2021 was an exciting year, as the project has seen significant growth.</p> <p>166k people visited the official documentation in 2021, totalling in 1,6m page views which is an increase of 83% when compared to 2020. The average visitor spends 1,5min on the site. While mobile phones make up 12% of visits, tablets only account for 0.6%. Visitors come from as many as 213 countries, which covers almost the whole world.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#features","title":"Features","text":"<p>It's absolutely mind-blowing that 38 new features were added to Material for MkDocs throughout 2021 \u2013 that's a new feature every 9,6 days \u2013 which was only possible because of the constantly improving funding situation. Following is a list of all features shipped in alphabetical order, some of which are still exclusively available to sponsors as part of Insiders:</p> <ul> <li>Admonition inline blocks</li> <li>Advanced search highlighting</li> <li>Anchor tracking</li> <li>Back-to-top button</li> <li>Boosting pages in search</li> <li>Brand new search plugin</li> <li>Code annotations</li> <li>Code annotations: anchor links</li> <li>Code annotations: strip comments</li> <li>Code block titles</li> <li>Code block line anchors</li> <li>Color palette toggle</li> <li>Content tabs: improved support</li> <li>Content tabs: auto-linking</li> <li>Content tabs: animated indicator</li> <li>Cookie consent</li> <li>Custom admonition icons</li> <li>Dark mode support for images</li> <li>Dismissable announcement bar</li> <li>Excluding content from search</li> <li>Latest release tag</li> <li>Mermaid.js integration</li> <li>Navigation icons</li> <li>Remove generator notice</li> <li>Rich search previews</li> <li>Stay on page when switching versions</li> <li>Search highlighting</li> <li>Search sharing</li> <li>Search suggestions</li> <li>Section index pages</li> <li>Site language selection</li> <li>Social cards</li> <li>Sticky navigation tabs</li> <li>Tags with search integration</li> <li>Tokenizer with lookahead</li> <li>Versioning</li> <li>Version warning</li> <li>Was this page helpful?</li> </ul> <p>Additionally, a lot of bugs were fixed in the 1,000 commits that were pushed to the repository this year. The changelog includes a list of all fixes. Furthermore, a large amount of time was invested into refactoring the code base to keep it in good shape. While the <code>mkdocs-material</code> package was released 55 times, <code>mkdocs-material-insiders</code> was shipped 72 times.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#funding","title":"Funding","text":"<p>In 2021, monthly funding increased from $1,050 in the beginning of January to more than $4,300 (Dec 27, 2021), totaling in a yearly budget of more than $50,000. Compared to last year, revenue from funding has increased by 617% \u2013 which is absolutely unbelievable:</p> <p></p> <p>I'm solely providing these numbers to fulfill the transparency pledge I'm giving to my awesome sponsors, and to show that it's possible to make existing Open Source projects sustainable by following a well-designed release strategy.</p> <p>You can learn about the strategy in the Insiders guide.</p>"},{"location":"blog/2021/12/27/the-past-present-and-future/#2022","title":"2022","text":"<p>Standing at the verge of the next year, it's safe to say that the project will continue to prosper and evolve, yielding many awesome features that will make technical writing more comfortable and flexible. Here's an excerpt of the features that will see the light of day in 2022:</p> <ul> <li> <p>Instant previews: instant previews will render a specific page section   inside a tooltip when hovering an internal link, which will allow to implement   things like glossaries. Further support for improving glossary functionality   will also be investigated.</p> </li> <li> <p>Text annotations: as a logical progression of code annotations which   were added in 2021, authors will be able to add annotations to plain text,   yielding excellent opportunities for side content. Of course, text annotations   will be as easy to use as code annotations.</p> </li> <li> <p>Navigation pruning: to optimize large documentation projects, Material   for MkDocs will introduce a new feature flag called <code>navigation.prune</code> that   will lead to significantly smaller HTML files for documentation projects with   huge navigation hierarchies.</p> </li> <li> <p>Navigation status badge: as an addition to the recently added   navigation icon support, a status will be attributable to   each page, allowing to mark a page in the navigation tree with an icon as    new or  deprecated.   Custom status types will also be supported.</p> </li> <li> <p>Card grids: as a further component in the toolkit of technical writing,   card grids will allow arranging content in grids, which is especially   useful for overview pages. They will allow to arrange arbitrary content,   including code blocks, admonitions, etc.</p> </li> <li> <p>Blog support: blogging support is still under investigation and expected   to be one of the major additions in 2022. Blogging will perfectly integrate   with writing documentation, allowing to use all components available in   Material for MkDocs.</p> </li> </ul> <p>This list is incomplete. Additionally, many new smaller features will be added next year, just as in 2021. You can follow @squidfunk on X to stay updated.</p> <p>Happy new year! </p>"},{"location":"blog/2024/08/19/how-were-transforming-material-for-mkdocs/","title":"Transforming Material for MkDocs","text":"<p>We are working on an amazing set of features which has required some behind-the-scenes work we are now ready to share in a series of posts. Here, we give an overview of our goals, features in the making, things that kept us up at night, and our commitment to Open Source.</p> <p>We know it's been quite a while since our last update, which is why we're eager to share what's happening in and around Material for MkDocs with you. For the largest part of 2024, we've been focused on transforming the core of Material for MkDocs preparing the ground for new, interconnected features that are amongst the most frequently requested.</p> <p>This article is the first in a series where we'll explore how we aim to support our users through improved information retrieval, provide better support for multi-lingual sites and versioning, as well as improve the overall authoring experience. We outline our vision for the projects' evolution and describe what we have been working on. In this and the coming blog posts, we will share our progress with you, and we're excited to hear your thoughts.</p> <p>Please note that this post includes several technical details in the footnotes, specifically on challenges. Feel free to skip them if you're not interested in the specifics.</p>"},{"location":"blog/2024/08/19/how-were-transforming-material-for-mkdocs/#a-success-story","title":"A success story","text":"<p>In 2024, Material for MkDocs has firmly established itself as a leading tool in the documentation framework landscape, with more than 5 million downloads each month as of this writing. What began as @squidfunk's personal project has evolved into a versatile resource for creating comprehensive documentation sites, personal websites, blogs, and notably, for managing knowledge both within and outside of organizations.</p> <p>With almost 50,000 public GitHub projects depending on Material for MkDocs, it's clear that the framework has made a substantial impact. Tens of thousands of authors rely on us to deliver documentation to millions of users each month.<sup>1</sup> Beyond its adoption by many popular Open Source projects, Material for MkDocs is trusted and financially supported by major corporations such as AWS, Microsoft, and Siemens, among many other companies and individuals. We're very grateful for the continued support we receive, which allows us to devote our time to this project, making writing documentation enjoyable.</p> <p>Our users particularly appreciate Material for MkDocs for its ease of use and straightforward setup. It simplifies the process by handling the complexities of web technologies for you, so you can build a production-ready static site in minutes without needing to invest years into mastering frontend development or JavaScript. This makes it accessible to a wide range of users, regardless of their technical background. Additionally, Material for MkDocs is MIT-licensed and free to use, which has contributed to its widespread adoption, and allows everybody to build sophisticated documentation sites at no cost.</p> <p>Our vision is to provide you with the tools that allow you to own your docs, enable you to develop your own processes for producing amazing documentation and to avoid being locked into costly subscription services even for doing simple things. We believe it is important that these tools should be easy to set up and configure to suit your needs but should also give you the freedom to adapt them further, if needed. This is why we are always striving to ensure our architectures are modular and future-proof.<sup>2</sup></p>"},{"location":"blog/2024/08/19/how-were-transforming-material-for-mkdocs/#challenges","title":"Challenges","text":"<p>Now, let's talk about our journey and the particular challenges we're addressing. With \"we\", we're referring to the incredible team that @squidfunk was fortunate to build around his original work, thanks to the financial support he receives from his sponsors. This remarkable team includes @alexvoss and @katharinalisalin, whose invaluable contributions in research, development, and community support have been essential to the project's ongoing success.</p> <p>Together, we've started exploring new technologies, incorporating the feedback we received from our users, and rethinking critical components from first principles, serving our growing community one of the best frameworks to create documentation.</p> <p>This section highlights the key areas we've been focusing on.</p>"},{"location":"blog/2024/08/19/how-were-transforming-material-for-mkdocs/#search-and-discovery","title":"Search and discovery","text":"<p>From our perspective, search is a cornerstone of any effective documentation site, enabling users to swiftly locate the information they need. From the start, we've relied on Lunr.js, a popular client-side search library that has streamlined the deployment of documentation sites without needing an external service. Over the years, Lunr.js has served us well by answering millions of queries on sites built with Material for MkDocs. Yet, as our users' needs evolved, we encountered limitations that proved difficult to overcome.</p> <p>We learned that the BM25 ranking algorithm at the core of Lunr.js (as in many other search implementations) isn't well-suited for effective and stable typeahead. Adding new documents can influence existing rankings, requiring manual adjustments<sup>3</sup> that are cumbersome and hard to scale. Furthermore, Lunr.js has performance issues that stem from its design not fully leveraging modern JavaScript engines and optimizations, making it slower and memory-intensive.<sup>4</sup></p> <p>Over the last years, we've invested substantially into improving the search experience. For instance, expanding Lunr.js' functionality to add support for rich search previews and tokenizer lookahead demanded substantial engineering effort. Lunr.js allows to customize tasks such as stemming, stopword filtering, and trimming with pipeline functions, but it makes it particularly hard to add extensions like term highlighting or alternative ranking methods. Compounded by the fact that Lunr.js has been unmaintained since 2020, it became clear that we needed to find a more powerful solution. We've looked at alternative JavaScript-based libraries to keep our client-side search, but none met our requirements or lived up to our expectations.</p> <p>To address these challenges, we've embarked on developing a new search system from first principles that not only matches but already exceeds the capabilities of Lunr.js. Built from the ground up, this system is faster, more compact, and most importantly: modular. It is based on a growing core evolving around two core concepts we isolated to be essential \u2013 engines and plugins \u2013 allowing for flexible configuration and assembly of components like text indexing, vector embeddings, filtering, ranking, highlighting, and more. Every part of it can be replaced or extended, enabling users to tailor the search system to their specific needs.</p> <p>Our new search system, which we will release as a separate MIT-licensed Open Source project, is designed to handle a wide range of scenarios \u2014 from small blogs to large documentation projects. Of course, it supports offline use and integrates seamlessly with both client and server environments. The advanced ranking system provides fine-tuned control, and integration with third-party services is now more straightforward.</p> <p> Goal \u2013 Empower users to quickly find the information they need while freeing authors from managing external services, by providing a search system that adapts to diverse content types.</p> <p>You might wonder why it's not yet available. The process of developing this system from scratch and uncovering its potential has led us to re-evaluate core concepts of Material for MkDocs. As a result, we've decided to postpone the release of the new search system to integrate it into the broader update that we've started to work on. If you keep on reading, you'll learn about further reasons why we've decided to follow this approach.</p> <p>We're excited to share more details about this update in one of the next posts in this series.</p>"},{"location":"blog/2024/08/19/how-were-transforming-material-for-mkdocs/#translations-and-versioning","title":"Translations and versioning","text":"<p>Supporting multi-language sites in MkDocs is the most requested feature on our discussion board and in conversations with users, yet it presents significant challenges, as MkDocs does not natively support it. The same applies to versioning, which also involves synchronisation of multi-project builds. While the MkDocs ecosystem has developed various plugins and tools to address these issues, there is still substantial untapped potential. We began exploring these areas but quickly encountered problems that hindered our progress.</p> <p>As you may know, our initial effort involved the projects plugin that aims to extend MkDocs to add support for multi-project environments as a solid foundation to support multi-language sites and versioning. Unfortunately, we encountered significant challenges due to MkDocs' internal architecture and design constraints, which we're working actively on resolving.<sup>5</sup></p> <p> Goal \u2013 Enable scaling documentation to any size or team structure by offering seamless methods for integrating multiple documentation projects, whether they involve different languages, versions, or distinct sections of an overall body of work.</p> <p>As a result, we are developing a new approach to offer a more comprehensive and robust solution for both multi-language support and versioning. This new approach also intersects with adjacent functionalities like search, as many of our users are interested in federated search capabilities that combine results from multiple documentation sites into a unified search interface. Overcoming this challenge is one of the major hurdles we need to address before releasing the new search system.</p>"},{"location":"blog/2024/08/19/how-were-transforming-material-for-mkdocs/#editing-and-collaboration","title":"Editing and collaboration","text":"<p>We had considered developing a live editor in response to MkDocs' performance issues with large projects, which in most cases stem from compute-intensive plugins that don't employ caching. A proof of concept based on Pyodide (= running Python in the browser) generated significant interest among users and prompted many organizations and individuals to share their collaborative workflows for feedback. Sadly, implementing this live editor proved to be very challenging, as it would require rebuilding substantial parts of MkDocs.<sup>6</sup> After discontinuing work on this approach, our progress with multi-project support has renewed our belief that we can finally solve the sluggish editing experience that was reported several times over the last years.<sup>7</sup></p> <p>This brings us to collaboration, which wasn't initially on our list of priorities. However, throughout 2024, conversations with various organizations and maintainers of popular Open Source projects highlighted a frequent request for enhanced collaboration features. Many users expressed a need for capabilities that would allow non-technical team members to suggest and make changes to the documentation. We're genuinely grateful for this feedback, as it has come at a pivotal time. We recognize the need to streamline tracking and discussing changes, as well as to facilitate drive-by contributions.</p> <p> Goal \u2013 Everyone, regardless of their technical skill level, can easily work on and improve the documentation and contribute to a growing corpus of knowledge.<sup>9</sup></p> <p>This focus on collaboration aligns with how knowledge is managed in enterprises. In large organizations, documentation often exists in information silos \u2014 decentralized yet essential repositories of information. We understand the need to be able to unify these disparate sources into a coherent body of knowledge while preserving decentralized ownership. This also nicely aligns with our previously outlined work on multi-project support, as well as the new search system to implement federated search among multiple projects.</p>"},{"location":"blog/2024/08/19/how-were-transforming-material-for-mkdocs/#large-language-models-llms","title":"Large Language Models (LLMs)","text":"<p>Almost a year ago, we introduced an experimental chatbot on our documentation site. It quickly became one of the most anticipated features, with users requesting the ability to deploy similar functionality on their own sites, underscoring the growing demand for interactive documentation tools. However, we found that adding to the myriad of existing chat solutions and simply building another thin wrapper on top of ChatGPT is nonsense.</p> <p> Goal \u2013 We're envisioning creating a unified interface that seamlessly integrates advanced search, chat, and summarization features, providing an interactive documentation experience.</p> <p>As we delved into this ambitious project, we gained valuable insights from user feedback. Users began interacting with the chatbot in their native languages, an outcome we hadn't anticipated given that our documentation is in English. Remarkably (or obviously to those that work on LLMs year round), the chatbot responded in the same language. This ability of LLMs is one of the genuinely exciting features of these machine learning models as it has the potential to improve the accessibility of the documentation. However, while we employed state-of-the-art RAG methodologies, the results were mixed, and occasional hallucinations surfaced.</p> <p>These experiences led us to prioritize enhancing our search capabilities before integrating LLM-based features. Building a search engine from scratch was already a substantial effort, and adding more complexity without a solid search foundation would be premature. By rearchitecting our search functionalities, we aim to create a robust platform that will seamlessly support advanced information retrieval and deliver a cohesive interactive documentation experience.</p>"},{"location":"blog/2024/08/19/how-were-transforming-material-for-mkdocs/#team-transparency-and-growth","title":"Team, transparency, and growth","text":"<p>While we navigate the challenges and explore the opportunities of this project, we consider it essential to demonstrate how we're building a solid foundation for its continued growth and success. Please consider this an overview rather than a formal roadmap \u2014 our detailed plans are in the works. The goals we've highlighted represent the most impactful areas we aim to address.</p> <p>Thanks to the generous support from our sponsors, we're fortunate to be assembling a team capable of dedicating significant time and expertise to this endeavor. This newfound capacity allows us to delve deeper into core development while also engaging more comprehensively with our user community. A special mention goes to @kamilkrzyskow, one of our invaluable community experts, who has been essential in supporting users and fostering discussions on our platform.</p> <p>With the team's support, @squidfunk can concentrate on the heart of development, while we have begun investing in user research. This effort is helping us understand how organizations and individuals interact with our tools, guiding the project's future direction based on real feedback from numerous conversations with users and companies.</p> <p>Looking to expand our team further, we are committed to improving transparency and communication. Our previous work often happened behind the scenes due to time constraints, but we're now focused on making our processes more open and inviting for new contributors. By embracing this collaborative approach, we aim to enhance our tools and ensure they meet the evolving needs of our community.</p>"},{"location":"blog/2024/08/19/how-were-transforming-material-for-mkdocs/#whats-ahead-of-us","title":"What's ahead of us","text":"<p>As we look into the future, some of the groundwork we're laying now is crucial for the exciting developments on the horizon. Many of the initiatives we've discussed represent foundational work that will set the stage for much more ambitious and innovative features. Once these core elements are in place, we'll deliver a range of exciting new functionalities that align with our vision and goals.</p> <p>In the coming months, we'll be sharing more details about our plans and how they will contribute to our overarching objectives. While growth and innovation are at the forefront of our plans, we want to assure you that our core values remain unchanged. We are committed to maintaining the principles that have guided us thus far, ensuring that our growth is both healthy and consistent:</p> <ul> <li> <p>Against recent industry trends with companies moving away from core ideas of Open Source, we are doubling down on our commitment to Open Source because we believe it's at the heart of the value proposition of our work and the docs as code approach.</p> </li> <li> <p>Our organic approach to growth is part of this strategy as it keeps us independent of individual funding sources and pressures to provide a return on investment, which is what causes many other projects to turn away from the principles of Open Source.</p> </li> <li> <p>Likewise, we are driven by the needs of the community for a rich ecosystem of adaptations of the core framework. Extensibility and modularity are key for this and we are working hard to improve the developer experience by providing clear interfaces.</p> </li> </ul> <p>Stay tuned for updates as we continue to build on our progress and explore new possibilities. We're excited about the future and look forward to sharing more with you as we advance.</p> <p>Martin, Alex and Kathi </p> <ol> <li> <p>We've collected invaluable feedback from enterprises and other Open Source maintainers, which revealed that the actual numbers are even higher. Many organizations leverage the framework within private infrastructures, such as self-hosted platforms like GitLab, for internal knowledge management. This suggests that the true reach of Material for MkDocs extends far beyond what is publicly visible.\u00a0\u21a9</p> </li> <li> <p>The built-in plugins that Material for MkDocs ships perfectly outline this principle, as they are complementary to each other and can be used in combination to build sophisticated pipelines. This modular design allows users to pick and choose the features they need, ensuring that the framework remains lightweight and flexible.</p> <p>For instance, the privacy plugin can work together with the optimize plugin so that external assets can be passed through the same optimization pipeline as the rest of your documentation. This means you can store and edit unoptimized files outside of your repository, and let both plugins automatically build an optimized site for you.\u00a0\u21a9</p> </li> <li> <p>Boosting documents in BM25 can lead to challenges, particularly with a changing corpus of documents. Relevance is calculated based on term frequency and the importance of terms across the entire corpus. Boosting a document involves adjusting its weight to make it more prominent in search results.</p> <p>As new documents are added or existing ones are modified, the overall distribution of term frequencies and their importance can shift. This recalibration can diminish the effectiveness of the boost, making it harder to maintain consistent ranking across a changing dataset. Essentially, the boosted documents may not stay as prominent or relevant as intended, leading to imbalances and scalability issues in search results.\u00a0\u21a9</p> </li> <li> <p>Lunr.js uses JavaScript objects to index and manage search data, which introduces inefficiencies due to how JavaScript engines handle object operations. JavaScript engines optimize performance using techniques like inline caching and object shape optimization. However, these optimizations rely on predictable and consistent object structures.</p> <p>The dynamic nature of Lunr.js' indexing \u2014 where documents can have varying structures \u2014 prevents the engine from applying these optimizations effectively. This means that while JavaScript engines can optimize for fixed, predictable object structures, they struggle with the polymorphic and fluid nature of Lunr.js's indexing, leading to performance issues as the amount of data grows.\u00a0\u21a9</p> </li> <li> <p>When developing the projects plugin, we initially made good progress, including adding support for nested projects and allowing for a tree structure where sub-projects can have further sub-projects. However, we quickly encountered difficulties, particularly with cross-project navigation. To illustrate, imagine that each project can link to any other project, which makes handling these interconnections complex, especially when dealing with circular dependencies \u2014 such as Project A linking to Project B and vice versa.</p> <p>Implementing multi-project support in MkDocs is particularly challenging due to the lack of an official programmatic API, which complicates efforts to extend its functionality. Moreover, resolving navigation issues before building projects is crucial for ensuring proper interconnectivity. These challenges combined made the development of the projects plugin a complex endeavor.\u00a0\u21a9</p> </li> <li> <p>Our proof of concept supported some features of Material for MkDocs but didn't cover them all. For instance, integrating support for icons or linking between documents would have necessitated reimplementing parts of MkDocs to bypass a full rebuild \u2014 something we obviously wanted to avoid. Additionally, certain links, such as those to blog posts generated from schemas, are not merely translated but computed dynamically, which means they cannot be inferred by replacing the <code>.md</code> extension with <code>.html</code>.\u00a0\u21a9</p> </li> <li> <p>After we raised this issue with the maintainers of MkDocs again<sup>8</sup>, and maintainership changed mid 2024, work on a ground-up rewrite that aims to address slow reloads by rendering only the page currently being built has started. It's still unclear how this rewrite will integrate with the requirements of existing plugins. Complex plugins such as mkdocstrings, or our built-in blog and tags plugins require a coordinated build of all pages to accurately resolve links between pages and to computed resources, which cannot be determined without building the entire project.</p> <p>Update: The new maintainer now publicly stated that he's working towards a new version of MkDocs that does not require or support plugins, and mentions it will be equally capable through offering customization via templating, themes, and styling, which he also mentioned to us and several other users in a team call on August 1. In this call, we raised objections multiple times in regards to how this will impact the ecosystem, to no avail. No intention or roadmap for plugin support was provided. This development is orthogonal to our goal empowering users and organizations to adapt the core framework to their requirements by the means of modularity. We're working on resolving this situation, and will provide a way forward for our community.\u00a0\u21a9</p> </li> <li> <p>Previously raised issues include #2418, #2384, and #1900.\u00a0\u21a9</p> </li> <li> <p>We are actively aligning our future development efforts to address this, recognizing it as a key area for improvement. While it's not something we can deliver immediately, we are committed to making this vision a reality in our work.\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/archive/2022/","title":"2022","text":""},{"location":"blog/archive/2021/","title":"2021","text":""},{"location":"blog/category/general/","title":"General","text":""},{"location":"blog/category/build/","title":"Build","text":""},{"location":"blog/category/performance/","title":"Performance","text":""},{"location":"blog/category/blog/","title":"Blog","text":""},{"location":"blog/category/search/","title":"Search","text":""}]}